on:
  workflow_dispatch:
    inputs:
      webhook_token:
        description: 'Token to authenticate the webhook'
        required: true
      callback_url:
        description: 'URL to send the results to'
        required: true
      total_tests:
        description: 'Total number of tests'
        required: false
      test_files:
        description: 'Comma separated list of test files to download'
        required: false
      test_files_storage_location:
        description: 'Location to store the test files'
        required: false

jobs:
  evaluate:
    name: Evaluate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up JDK 18
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '18'

      - name: Install yq
        run: sudo snap install yq

      - name: Compile Project
        id: compile
        run: |
          set -o pipefail
          mvn -B -q compile 2>&1 | tee compile.log
        continue-on-error: true

      - name: Handle Compilation Error
        if: steps.compile.outcome == 'failure'
        env:
          WEBHOOK_TOKEN: ${{ inputs.webhook_token }}
          CALLBACK_URL: ${{ inputs.callback_url }}
          TOTAL_TESTS_INPUT: ${{ inputs.total_tests }}
        run: |
          echo "Raw input: $TOTAL_TESTS_INPUT"

          # Strip non-digit chars and fallback
          if [[ "$TOTAL_TESTS_INPUT" =~ ^[0-9]+$ ]]; then
             TOTAL_TESTS=$TOTAL_TESTS_INPUT
          else
            echo "Invalid or empty TOTAL_TESTS_INPUT, defaulting to 0"
            TOTAL_TESTS=0
          fi
          
          error_output=$(head -c 2000 compile.log | jq -Rs .)
          payload=$(jq -n \
            --argjson passed 0 \
            --argjson failed 0 \
            --argjson total "$TOTAL_TESTS" \
            --argjson error "$error_output" \
            --arg sha "$GITHUB_SHA" \
            '{passedTests: $passed, failedTests: $failed, totalTests: $total, compileError: $error, commitSHA: $sha}')
          
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: $WEBHOOK_TOKEN" \
            -d "$payload" \
            "$CALLBACK_URL"
          exit 1

      - name: Run tests
        run: mvn test
        continue-on-error: true

      - name: Process test results
        shell: bash
        env:
          WEBHOOK_TOKEN: ${{ inputs.webhook_token }}
          CALLBACK_URL: ${{ inputs.callback_url }}
          TOTAL_TESTS: ${{ inputs.total_tests || 0 }}
        run: |
          set +e  # Important! Avoid exiting on individual command failures
          
          # Initialize counters
          total_tests_count=$TOTAL_TESTS
          passed_tests_count=0
          failed_tests_count=0
          failed_tests=()
          passed_tests=()

          # Process reports if they exist
          if [ -d "target/surefire-reports" ]; then
            for file in target/surefire-reports/*.xml; do
              if [ -f "$file" ]; then
                tests=$(yq e '.testsuite."+@tests"' "$file")
                failures=$(yq e '.testsuite."+@failures"' "$file")
                errors=$(yq e '.testsuite."+@errors"' "$file")
                failed=$((failures + errors))
                passed=$((tests - failed))

                passed_tests_count=$((passed_tests_count + passed))
                failed_tests_count=$((failed_tests_count + failed))

                # Process failed test cases
                # Parse failed test cases
                readarray failed_testcases < <(yq e -o=j -I=0 '.testsuite.testcase[] | select(has("failure"))' "$file")
                for testcase in "${failed_testcases[@]}"; do
                  name=$(echo "$testcase" | yq -r '.+@name')
                  message=$(echo "$testcase" | yq -r '.failure.+@message')
                  expected=$(grep -oP '(?<=expected: <).*?(?=> but was: <)' <<< "$message")
                  actual=$(grep -oP '(?<=but was: <).*?(?=>)' <<< "$message")
          
                  json_test_result=$(jq -n \
                  --arg name "$name" \
                  --arg expected "$expected" \
                  --arg actual "$actual" \
                  '{name: $name, expectedOutput: $expected, actualOutput: $actual}')
                  failed_tests+=("$json_test_result")
                done
          
                # Parse passed test cases
                readarray passed_testcases < <(yq e -o=j -I=0 '.testsuite.testcase[] | select(has("failure") | not)' "$file")
                for testcase in "${passed_testcases[@]}"; do
                  name=$(echo "$testcase" | yq -r '.+@name')
                  passed_tests+=("$(jq -Rn --arg name "$name" '$name')")
                done
              fi
            done
          fi
          
          # Format arrays using jq
          failed_tests=$(printf '%s\n' "${failed_tests[@]}" | jq -s .)
          passed_tests=$(printf '%s\n' "${passed_tests[@]}" | jq -s .)
    
          # Payload
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: $WEBHOOK_TOKEN" \
            -d "$(jq -n \
              --argjson passed $passed_tests_count \
              --argjson failed $failed_tests_count \
              --argjson total $total_tests_count \
              --argjson passedCases "$passed_tests" \
              --argjson failedCases "$failed_tests" \
              --arg sha "$GITHUB_SHA" \
              '{passedTests: $passed, failedTests: $failed, totalTests: $total, passedCases: $passedCases, failedCases: $failedCases, commitSHA: $sha}')" \
            "$CALLBACK_URL"
